<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2022/06/17/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>欢迎界面</category>
      </categories>
      <tags>
        <tag>Tag1</tag>
      </tags>
  </entry>
  <entry>
    <title>PipeDream</title>
    <url>/2022/04/23/PipeDream/</url>
    <content><![CDATA[<h3 id="PipeDream-Generalized-Pipeline-Parallelism-for-DNN-Training-论文阅读笔记"><a href="#PipeDream-Generalized-Pipeline-Parallelism-for-DNN-Training-论文阅读笔记" class="headerlink" title="PipeDream: Generalized Pipeline Parallelism for DNN Training 论文阅读笔记"></a>PipeDream: Generalized Pipeline Parallelism for DNN Training 论文阅读笔记</h3><p>####[D. Narayanan et al., “PipeDream: Generalized Pipeline Parallelism for DNN Training”, SOSP, 2019 ]</p>
]]></content>
      <categories>
        <category>Paper</category>
        <category>OS</category>
      </categories>
      <tags>
        <tag>PipeDream</tag>
        <tag>os</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 主题设置</title>
    <url>/2021/01/02/hexo2/</url>
    <content><![CDATA[<p>##HEXO配置主题</p>
<p>更换自己心仪的主题，让自己的网站更加美观，首先下载自己选中的主题，<a href="https://link.juejin.cn/?target=https://hexo.io/themes/">hexo主题</a></p>
<p>###下载主题</p>
<p>通过git工具下载hexo主题<a href="https://link.juejin.cn/?target=https://hexo.io/themes/">下载</a> 自己选中的主题</p>
<pre><code>git clone https://github.com/xxx/xxx
</code></pre>
<ul>
<li>xxx：输入自己选择的主题地址</li>
</ul>
<h3 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h3><p>主题下载之后，在自己的博客/目录下有_config.yml , 修改theme为自己下载的主题名字就行了。</p>
<pre><code>theme:  主题名称
</code></pre>
<p><em><strong>注意： 此时_config.yml 的文件有两个，一个在根/目录下配置的是博客的全局，另一个在自己下载的主题文件下面，主题_config.yml 设置的是该主题的配置</strong></em></p>
<p>###重新生成</p>
<pre><code>hexo g
hexo s
</code></pre>
<p>这时打开4000端口就可以看到自己的主题已经生效：</p>
<img src="/images/newTheme.png">


<h3 id="设置主题"><a href="#设置主题" class="headerlink" title="设置主题"></a>设置主题</h3><p>我个人目前用的是ayer主题，关于ayer主题的更多配置信息请参考ayer官网<a href="https://shen-yu.gitee.io/2019/ayer/">链接</a>  </p>
<p>文章参考：<br>    <a href="https://juejin.cn/post/6844903679858851853">https://juejin.cn/post/6844903679858851853</a><br>            <a href="https://blog.51cto.com/u_15127503/3935693">https://blog.51cto.com/u_15127503/3935693</a></p>
]]></content>
      <categories>
        <category>文章</category>
      </categories>
      <tags>
        <tag>hexo部署</tag>
        <tag>hexo Theme</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客搭建</title>
    <url>/2021/01/02/one/</url>
    <content><![CDATA[<h2 id="免费部署个人博客hexo到GitHub"><a href="#免费部署个人博客hexo到GitHub" class="headerlink" title="免费部署个人博客hexo到GitHub"></a>免费部署个人博客hexo到GitHub</h2><h4 id="Set-up-hexo-on-github-page"><a href="#Set-up-hexo-on-github-page" class="headerlink" title="Set up hexo on github page"></a>Set up hexo on github page</h4><hr>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><blockquote>
<h3 id="配置环境-Configuration-Environment"><a href="#配置环境-Configuration-Environment" class="headerlink" title="配置环境 (Configuration Environment)"></a>配置环境 <em>(Configuration Environment)</em></h3></blockquote>
<hr>
<ol>
<li><p>hexo的安装是基于node所以需要先安装node,下载地址: <a href="http://nodejs.cn/download/">node</a></p>
</li>
<li><p>根据安装的提示安装完成按<kbd>Windows</kbd>+<kbd>R</kbd>键输入CMD打开命令行输入命令  </p>
<p> ’node -v‘  </p>
<p> 如果出现版本号说明安装成功  </p>
</li>
<li><p>安装git <a href="https://gitforwindows.org/">下载</a></p>
<p> 检查是否安装成功：</p>
<p> git –version</p>
</li>
</ol>
<p>通过右键打开git bash 来配置git</p>
<pre><code>git config --global user.name &quot;填入github的用户名&quot;
git config --global user.email &quot;githu的邮箱地址&quot;
</code></pre>
<p>我是通过https的方式上传和更新博客的，如果需要SSH方式上传，还需要配置SSH，可以参考<a href="https://blog.51cto.com/u_15127503/3935693">链接</a></p>
<ol start="4">
<li>接下来就可以使用命令行安装hexo啦，：</li>
</ol>
<pre><code>npm install hexo-cli -g
</code></pre>
<ol start="5">
<li>初始化自己的博客目录：</li>
</ol>
<pre><code>hexo init name.github.io (name写成自己想要的博客名字就可以)
</code></pre>
<ol start="6">
<li>初始化之后会在本目录下生成name.github.io的文件夹，进入文件夹</li>
</ol>
<pre><code>cd name.github.io
</code></pre>
<p>博客目录的说明：<br><strong>_config.yml</strong> 网站的配置信息，可以在此配置大部分的参数。</p>
<p><strong>package.json</strong> 应用程序的信息，新添加的插件内容也会显示在这里，可以不做修改。</p>
<p><strong>scaffolds</strong> 模板文件夹，新建文章时，Hexo会根据scaffolds来建立文件。 Hexo的模板是指在新建的Markdown文件中默认填充的内容，我们可以在模板上添加自定义内容，比如categories，tags等。</p>
<p><strong>source</strong> 文件夹是存放用户资源的地方，也就是我们的博客内容。初始设置两个文件夹，posts（文章）和drafts（草稿）。之后通过命令新建页面后，文件夹数量会增加。</p>
<p><strong>themes</strong> 主题文件夹，用于存放主题文件包，Hexo会根据主题内容生成静态页面，默认主题为landscape，可根据个人喜好进行更改。</p>
<p>以上我们所有的前期下载步骤就准备完成了，接下来就是测试hexo是否可以稳定的运行</p>
<blockquote>
<h3 id="设置Hexo-set-up-Hexo"><a href="#设置Hexo-set-up-Hexo" class="headerlink" title="设置Hexo (set up Hexo)"></a>设置Hexo <em>(set up Hexo)</em></h3></blockquote>
<ol>
<li>安装hexo</li>
</ol>
<pre><code>npm install
</code></pre>
<ol start="2">
<li>生成静态页面</li>
</ol>
<pre><code>hexo clean
hexo g
</code></pre>
<p>这里clean是清理之前生成的各种html文件和环境，g就是<font color=#9999>generate</font>生成   </p>
<ol start="3">
<li>运行网站，在本地测试看是否能跑</li>
</ol>
<pre><code>hexo s
</code></pre>
<p>s是<font color=#9999>server</font>，运行服务器<br>此时我们可以通过访问本地4000端口查看<font color=#9999>localhost:4000</font></p>
<img src="/images/hexoStart.awebp">

<blockquote>
<h3 id="添加分类和标签-（add-tags-and-categories）"><a href="#添加分类和标签-（add-tags-and-categories）" class="headerlink" title="添加分类和标签 （add tags and categories）"></a>添加分类和标签 <em>（add tags and categories）</em></h3><p>Hexo给出了分类和标签等特性，分类页面能自动索引文章并进行分类归档</p>
</blockquote>
<ul>
<li>通过命令行打开分类功能：</li>
</ul>
<pre><code>hexo new page categories
</code></pre>
<p>以上命令会自动在source/categories 下生成<font color=#9999>index.md</font>文件<br>将文件改成：</p>
<pre><code>---
title: categories
date: 2018-12-22 12:56:24
type: categories
layout: categories
comments: false
---
</code></pre>
<p><font color=#9999>title</font>: 是生成网页后的标题<br><font color=#9999>type</font>: 这里的categories类型是定义好的，自带索引分离功能<br><font color=#9999>comments</font>: 是评论功能，flase表示关闭  </p>
<p>如果运行 hexo s 就会在public文件下生成对应的html文件</p>
<ul>
<li>通过命令行打开标签功能</li>
</ul>
<p>和打开分类功能相同</p>
<p>首先，生成source/tags文件夹和对应的index.md文件</p>
<pre><code>hexo new page tags
</code></pre>
<p>然后更改index.md文件</p>
<pre><code>---
title: tags
date: 2018-12-22 12:56:24
type: tags
layout: tags
comments: false
---
</code></pre>
<p><em>注意代码中的—是网页的表头，配置的时候要加上</em></p>
<p>给文章添加分类和标签部分在下面添加文章中说明！</p>
<blockquote>
<h3 id="添加文章-（add-new-article"><a href="#添加文章-（add-new-article" class="headerlink" title="添加文章 （add new article)"></a>添加文章 <em>（add new article)</em></h3></blockquote>
<p>现在就可以尝试给自己的博客添加一篇文章了<br>首先还是创建一篇文章，可以通过命令行或直接在<br><em><strong>source/_posts</strong></em>文件直接创建<br><em><strong>.md文件</strong></em>的方式：</p>
<pre><code>hexo new article (article写成你的文章的名字）
</code></pre>
<p>在文章的头部为文章标明和备注类型等：</p>
<pre><code>---
title: 部署个人博客
date: 2021-01-02 12:32:23
tags:
    - 标签1
    - 标签2
categories:
    - 类型
---
</code></pre>
<p>运行以后就成功部署你的第一篇文章啦，可以通过分类或标签的方式找到你对应的文章</p>
<p>可以为文章添加多个标签和类型，书写格式如上</p>
<blockquote>
<h3 id="将博客部署到你的github仓库上-（add-Blog-on-GitHub"><a href="#将博客部署到你的github仓库上-（add-Blog-on-GitHub" class="headerlink" title="将博客部署到你的github仓库上 （add Blog on GitHub)"></a>将博客部署到你的github仓库上 <em>（add Blog on GitHub)</em></h3></blockquote>
<ol>
<li><p>首先要在自己的github上创建相应的仓库</p>
<p><font color=#9999>!!!注意</font>创建的仓库名称是要固定格式的</p>
<p> 创建一个public名称为<font color=#9999>username.github.io</font>的仓库，这里usernanme必须是你本人的github名字</p>
</li>
<li><p>部署代码到github</p>
<p> 打开站点的配置文件_config.yml，在文件最下方有的deplay字段，按下放修改</p>
</li>
</ol>
<pre><code>deploy:
type: git
repo: https://github.com/username/username.github.io.git
branch: main
</code></pre>
<p><strong>repo:</strong> 中username 写入自己的github用户名，如果是通过SSH方式链接的需要写成<br><a href="mailto:&#103;&#105;&#x74;&#64;&#103;&#x69;&#116;&#104;&#x75;&#98;&#46;&#x63;&#x6f;&#x6d;">&#103;&#105;&#x74;&#64;&#103;&#x69;&#116;&#104;&#x75;&#98;&#46;&#x63;&#x6f;&#x6d;</a>:username/username.github.io.git</p>
<p><strong>branch:</strong> 写你要上传到仓库的哪个分支，最新版本的github跟新了默认版本为main,旧版本的是master</p>
<ol start="3">
<li>部署deploy-git</li>
</ol>
<pre><code>npm install hexo-deployer-git --save
</code></pre>
<p>部署deploy-git以后可以通过hexo的命令就直接自动部署博客了，不需要再手动敲git命令</p>
<p>部署完成以后就可以上传了</p>
<pre><code>hexo c
hexo g
hexo d
</code></pre>
<p>这里的d就是deploy部署文章，也可以写成hexo deploy , c 和 g在上文都有介绍<br>部署完成以后就可以打开网址看到了，<br>网址可以在仓库setting-Pages上看到</p>
<img src="/images/githubPage.png">


<p>文章参考：<br>    <a href="https://juejin.cn/post/6844903679858851853">https://juejin.cn/post/6844903679858851853</a><br>            <a href="https://blog.51cto.com/u_15127503/3935693">https://blog.51cto.com/u_15127503/3935693</a></p>
]]></content>
      <categories>
        <category>文章</category>
      </categories>
      <tags>
        <tag>hexo部署</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity中网页显示插件（UniWebView)使用方法</title>
    <url>/2022/08/05/uniWebView/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Unity</category>
        <category>tools</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>uniWebView</tag>
      </tags>
  </entry>
  <entry>
    <title>排序算法（low)</title>
    <url>/2022/06/17/sortAlgorithm/</url>
    <content><![CDATA[<h1 id="排序算法（一）"><a href="#排序算法（一）" class="headerlink" title="排序算法（一）"></a>排序算法（一）</h1><blockquote>
<h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3></blockquote>
<ul>
<li><p>二分查找的前提是已经排序好的数据</p>
</li>
<li><p>返回数组的下表</p>
<p>  def bin_search(data_set, value):</p>
<pre><code>  low = 0
  high = len(data_set) - 1
  while low &lt;= high:
      mid = (low + high) // 2
      if data_set[mid] == value:
          return mid
      elif data_set[mid] &gt; value:
          high = mid - 1
      else:
          low = mid + 1
</code></pre>
</li>
</ul>
<blockquote>
<h3 id="冒泡排序（Bubble-sort"><a href="#冒泡排序（Bubble-sort" class="headerlink" title="冒泡排序（Bubble sort)"></a>冒泡排序（Bubble sort)</h3></blockquote>
<ul>
<li>冒泡排序的时间复杂度是n2</li>
</ul>
<pre><code>def bubble_sort(data_set):
    for i in range(len(data_set)-1):
        for j in range(len(data_set)-i-1):
            if data_set[j]&gt;data_set[j+1]:
                data_set[j],data_set[j+1]=data_set[j+1],data_set[j]
    return data_set
</code></pre>
<blockquote>
<h3 id="选择排序（select-sort"><a href="#选择排序（select-sort" class="headerlink" title="选择排序（select sort)"></a>选择排序（select sort)</h3></blockquote>
<ul>
<li>循环选择最小的值一次放在最前边</li>
<li>一趟排序记录最小的数， 放在第一个位置上</li>
<li>再一趟排序记录列表无序区最小的数，放在第二个位置</li>
<li>。。。。。</li>
<li>算法关键点：有序区和无序区，无序区最小数的位置</li>
</ul>
<pre><code>def select_sort(li):
    for i in range(len(li)-1):
        min_loc=i
        for j in range(i+1,len(li)):
            if li[j]&lt;li[min_loc]:
                min_loc=j
        if min_loc != i:
            li[i],li[min_loc]=li[min_loc],li[i]
</code></pre>
<blockquote>
<h3 id="插入排序（insert-sort"><a href="#插入排序（insert-sort" class="headerlink" title="插入排序（insert sort)"></a>插入排序（insert sort)</h3></blockquote>
<ul>
<li>初始时手里（有序区）只有一张牌</li>
<li>每次（从无序区）摸一张牌，插入到手里已有牌的正确位置</li>
<li>左手放置有序的牌（从小到大） ， 右手为无序牌， 每次从右手的第一个位置抽取一张牌，往左手插入。</li>
</ul>
<pre><code>def insert_sort(data_set):
    for i in range(1,len(data_set):
        catch=data_set[i]  #catch 存放右手抓取的牌
        left_index=i-1     #left_index一开始存取的是左手最后一个数下标
        while left_index&gt;=0 and catch&lt;=data_set[left_index]:  #当左手下标大于0，并且抓取的牌小于左手对应下标的牌
            data_set[left_index+1]=dsata_set[left_index]    #将左手下表的牌向后移动一位
            left_index=left_index-1     #将下表向前移动一位
        data_set[left_index+1]=catch    #循环结束将牌插入到下表后
    return data_set


        
</code></pre>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>冒泡</tag>
        <tag>选择</tag>
        <tag>插入</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring用法总结</title>
    <url>/2022/08/19/Spring/</url>
    <content><![CDATA[<h2 id="一、Spring概述"><a href="#一、Spring概述" class="headerlink" title="一、Spring概述"></a>一、Spring概述</h2><h4 id="1-1-web项目开发中的耦合度问题"><a href="#1-1-web项目开发中的耦合度问题" class="headerlink" title="1.1 web项目开发中的耦合度问题"></a>1.1 web项目开发中的耦合度问题</h4><ul>
<li><p>在Servlet中需要调用service中的方法，则需要在Servlet类中通过new关键字创建Service的实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductService</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Product&gt; <span class="title">listProducts</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductServiceImpl1</span> <span class="keyword">implements</span> <span class="title">ProductService</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Product&gt; <span class="title">listProducts</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//查询热销商品</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductServiceImpl2</span> <span class="keyword">implements</span> <span class="title">ProductService</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Product&gt; <span class="title">listProducts</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//查询好评商品</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductListServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//在servlet中使用new关键字创建ProductServiceImpl1对象，增加了servlet和service的耦合度</span></span><br><span class="line">    <span class="keyword">private</span> ProductService productService = <span class="keyword">new</span> ProductServiceImpl1();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        productService.listProducts();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在service实现类中需要调用DAO中的方法，也需要在servcie实现类通过new关键字创建DAO实现类对象</p>
</li>
<li><p>如果使用new关键字创建对象：</p>
<ul>
<li>失去了面向接口编程的灵活性</li>
<li>代码的侵入性增强（增加了耦合度）、降低了代码的灵活性</li>
<li>增强项目的扩展性</li>
</ul>
</li>
</ul>
<h4 id="1-2-面向接口编程"><a href="#1-2-面向接口编程" class="headerlink" title="1.2 面向接口编程"></a>1.2 面向接口编程</h4><table>
<thead>
<tr>
<th>面向接口编程</th>
</tr>
</thead>
<tbody><tr>
<td><img src="/images/Springimgs/1616724645995.png"></td>
</tr>
</tbody></table>
<p><code>解决方案</code>：在Servlet中定义Service接口的对象变量，不使用new关键字创建实现类对象，在servlet的实例化的时候，通过反射动态的给Service对象变量赋值。</p>
<p><code>如何实现</code>：Spring可以做到！！！</p>
<h4 id="1-3-Spring介绍"><a href="#1-3-Spring介绍" class="headerlink" title="1.3 Spring介绍"></a>1.3 Spring介绍</h4><blockquote>
<p>Spring是一个<code>轻量级的控制反转和面向切面的容器</code>框架，用来解决企业项目开发的复杂度问题—解耦</p>
</blockquote>
<ul>
<li>轻量级：体积小，对代码没有侵入性</li>
<li>控制反转：IoC（Inverse of Control）,把创建对象的工作交由Spring完成，Spring在创建对象的时候同时可以完成对象属性赋值（DI）</li>
<li>面向切面：AOP（Aspect Oriented Programming）面向切面编程，可以在不改变原有业务逻辑的情况下实现对业务的增强</li>
<li>容器：实例的容器，管理创建的对象</li>
</ul>
<h4 id="1-4-Spring架构"><a href="#1-4-Spring架构" class="headerlink" title="1.4 Spring架构"></a>1.4 Spring架构</h4><ul>
<li><p>官网 <a href="https://spring.io/">https://spring.io/</a></p>
<p><img src="/images/Springimgs/1616728103181.png" alt="1616728103181"></p>
</li>
<li><p>Spring架构图</p>
<p><img src="/images/Springimgs/1616728204844.png" alt="1616728204844"></p>
</li>
</ul>
<h6 id="1-4-1-Core-Container"><a href="#1-4-1-Core-Container" class="headerlink" title="1.4.1 Core Container"></a>1.4.1 Core Container</h6><blockquote>
<p>Spring容器组件，用于完成实例的创建和管理</p>
<ul>
<li>core</li>
<li>beans   实例管理</li>
<li>context 容器上下文</li>
</ul>
</blockquote>
<h6 id="1-4-2-AOP、Aspects"><a href="#1-4-2-AOP、Aspects" class="headerlink" title="1.4.2 AOP、Aspects"></a>1.4.2 AOP、Aspects</h6><blockquote>
<p>Spring AOP组件，实现面向切面编程</p>
<ul>
<li>aop</li>
<li>aspects</li>
</ul>
</blockquote>
<h6 id="1-4-3-web"><a href="#1-4-3-web" class="headerlink" title="1.4.3 web"></a>1.4.3 web</h6><blockquote>
<p>Spring web组件实际指的是SpringMVC框架，实现web项目的MVC控制</p>
<ul>
<li>web (Spring对web项目的支持)</li>
<li>webmvc (SpringMVC组件)</li>
</ul>
</blockquote>
<h6 id="1-4-4-Data-Access"><a href="#1-4-4-Data-Access" class="headerlink" title="1.4.4 Data Access"></a>1.4.4 Data Access</h6><blockquote>
<p>Spring数据访问组件，也是一个基于JDBC封装的持久层框架（即使没有mybatis，Spring也可以完成持久化操作）</p>
<ul>
<li>tx</li>
</ul>
</blockquote>
<h6 id="1-4-5-Test"><a href="#1-4-5-Test" class="headerlink" title="1.4.5 Test"></a>1.4.5 Test</h6><blockquote>
<p>Spring的单元测试组件，提供了Spring环境下的单元测试支持</p>
<ul>
<li>test</li>
</ul>
</blockquote>
<h2 id="二、Spring-IoC-—-基于XML"><a href="#二、Spring-IoC-—-基于XML" class="headerlink" title="二、Spring IoC — 基于XML"></a>二、Spring IoC — 基于XML</h2><blockquote>
<p>Spring IoC 容器组件，可以完成对象的创建、对象属性赋值、对象管理</p>
</blockquote>
<h4 id="2-1-Spring框架部署（IoC）"><a href="#2-1-Spring框架部署（IoC）" class="headerlink" title="2.1 Spring框架部署（IoC）"></a>2.1 Spring框架部署（IoC）</h4><h6 id="2-1-1-创建Maven工程"><a href="#2-1-1-创建Maven工程" class="headerlink" title="2.1.1 创建Maven工程"></a>2.1.1 创建Maven工程</h6><ul>
<li>Java</li>
<li>Web</li>
</ul>
<h6 id="2-1-2-添加SpringIoC依赖"><a href="#2-1-2-添加SpringIoC依赖" class="headerlink" title="2.1.2 添加SpringIoC依赖"></a>2.1.2 添加SpringIoC依赖</h6><ul>
<li>core</li>
<li>beans</li>
<li>aop</li>
<li>expression</li>
<li><code>context</code></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="2-1-3-创建Spring配置文件"><a href="#2-1-3-创建Spring配置文件" class="headerlink" title="2.1.3 创建Spring配置文件"></a>2.1.3 创建Spring配置文件</h6><blockquote>
<p>通过配置文件”告诉”Spring容器创建什么对象，给对象属性赋什么值</p>
</blockquote>
<ul>
<li>在resources目录下创建名为<code>appicationContext.xml</code>的文件（文件名是可以自定义的）</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  对于一个xml文件如果作为框架的配置文件，需要遵守框架的配置规则  --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  通常一个框架为了让开发者能够正确的配置，都会提供xml的规范文件（dtd\xsd）  --&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="2-2-SpringIoC使用"><a href="#2-2-SpringIoC使用" class="headerlink" title="2.2 SpringIoC使用"></a>2.2 SpringIoC使用</h4><blockquote>
<p>使用 SpringIoC组件创建并管理对象</p>
</blockquote>
<h6 id="2-2-1-创建一个实体类"><a href="#2-2-1-创建一个实体类" class="headerlink" title="2.2.1 创建一个实体类"></a>2.2.1 创建一个实体类</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String stuNum;</span><br><span class="line">    <span class="keyword">private</span> String stuName;</span><br><span class="line">    <span class="keyword">private</span> String stuGender;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> stuAge;</span><br><span class="line">    <span class="keyword">private</span> Date enterenceTime; <span class="comment">//入学日期</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="2-2-2-在Spring配置文件中配置实体类"><a href="#2-2-2-在Spring配置文件中配置实体类" class="headerlink" title="2.2.2 在Spring配置文件中配置实体类"></a>2.2.2 在Spring配置文件中配置实体类</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--通过bean将实体类配置给Spring进行管理,id表示实体类的唯一表示--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Student&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuNum&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10002&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;李斯&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuGender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuAge&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="2-2-3-初始化Spring对象工厂，获取对象"><a href="#2-2-3-初始化Spring对象工厂，获取对象" class="headerlink" title="2.2.3 初始化Spring对象工厂，获取对象"></a>2.2.3 初始化Spring对象工厂，获取对象</h6><ul>
<li>ClassPathXMLApplicationContext</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.初始化Spring容器,加载Spring配置文件</span></span><br><span class="line">ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"><span class="comment">//2.通过Spring容器获取Student对象</span></span><br><span class="line">Student student2 = (Student) context.getBean(<span class="string">&quot;stu&quot;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="2-3-IoC和DI"><a href="#2-3-IoC和DI" class="headerlink" title="2.3 IoC和DI"></a>2.3 IoC和DI</h4><ul>
<li>IoC (Inverse of Control) 控制反转，通过Spring对象工厂完成对象的创建</li>
<li>DI (Dependency Injection)依赖注入，在Spring完成对象创建的同时依赖Spring容器完成对象属性的赋值</li>
</ul>
<h6 id="2-3-1-IoC"><a href="#2-3-1-IoC" class="headerlink" title="2.3.1 IoC"></a>2.3.1 IoC</h6><blockquote>
<p>当我们需要通过Spring对象工厂创建某个类的对象时候，需要将这个交给Spring管理——通过bean标签配置</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--通过bean将实体类配置给Spring进行管理,id表示实体类的唯一表示--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Student&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Book&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="2-3-2-DI"><a href="#2-3-2-DI" class="headerlink" title="2.3.2 DI"></a>2.3.2 DI</h6><blockquote>
<p>通过Spring容器给创建的对象属性赋值</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Clazz&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--通过bean将实体类配置给Spring进行管理,id表示实体类的唯一表示--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Student&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuNum&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10001&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-4-DI依赖注入"><a href="#2-4-DI依赖注入" class="headerlink" title="2.4 DI依赖注入"></a>2.4 DI依赖注入</h4><h6 id="2-4-1-依赖注入三种方式"><a href="#2-4-1-依赖注入三种方式" class="headerlink" title="2.4.1 依赖注入三种方式"></a>2.4.1 依赖注入三种方式</h6><blockquote>
<p>Spring容器加载配置文件之后，通过<code>反射</code>创建类的对象，并给属性赋值；</p>
<p>Spring容器通过反射实现属性注入有三种方式：</p>
<ul>
<li>set方法注入</li>
<li>构造器注入</li>
<li>接口注入（不常用）</li>
</ul>
</blockquote>
<h6 id="2-4-2-set方法注入"><a href="#2-4-2-set方法注入" class="headerlink" title="2.4.2 set方法注入"></a>2.4.2 set方法注入</h6><blockquote>
<p>在bean标签中通过配置property标签给属性属性赋值，实际上就是通过反射调用set方法完成属性的注入</p>
</blockquote>
<p><strong>简单类型及字符串</strong></p>
<ul>
<li>直接通过property标签的value属性赋值</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--通过bean将实体类配置给Spring进行管理,id表示实体类的唯一表示--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Student&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    简单类型    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuNum&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10001&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuAge&quot;</span> <span class="attr">value</span>=<span class="string">&quot;12&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    字符串类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;weight&quot;</span> <span class="attr">value</span>=<span class="string">&quot;62.3&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>日期类型</strong></p>
<ul>
<li>方式1：在property标签中通过ref引用Spring容器中的一个对象</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;date&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.util.Date&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Student&quot;</span> &gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    日期类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enterenceTime&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;date&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>方式2：在property标签中添加子标签bean来指定对象</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Student&quot;</span> &gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    日期类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enterenceTime&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;java.util.Date&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>自定义类对象属性</strong></p>
<ul>
<li>方式1：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cla&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Clazz&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;classId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2010&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;className&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Java2010&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  自定义对象类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;cla&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>方式2</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  自定义对象类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Clazz&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;classId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2010&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;className&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Java2010&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>集合类型</strong></p>
<ul>
<li><p>List</p>
<ul>
<li>List<String>  List中的元素是字符串或者简单类型的封装类</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span> <span class="attr">value</span>=<span class="string">&quot;旅游,电影&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>旅游<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>电影<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>List<Object> List中的元素是对象类型</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Book&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Book&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Book&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Book&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;book&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span>  <span class="comment">&lt;!--引用容器中的备案--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;book&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>Set</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sets&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--和list元素注入方式相同--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>Map</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maps&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>k1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>123<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>k2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>456<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>Properties</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;k1&quot;</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;k2&quot;</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h6 id="2-4-3-构造器注入"><a href="#2-4-3-构造器注入" class="headerlink" title="2.4.3 构造器注入"></a>2.4.3 构造器注入</h6><p><strong>简单类型、字符串、对象</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String stuNum;</span><br><span class="line">    <span class="keyword">private</span> String stuName;</span><br><span class="line">    <span class="keyword">private</span> String stuGender;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> stuAge;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> weight;</span><br><span class="line">    <span class="keyword">private</span> Date enterenceTime; <span class="comment">//入学日期</span></span><br><span class="line">    <span class="keyword">private</span> Clazz clazz;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String stuNum, String stuName, String stuGender, <span class="keyword">int</span> stuAge, <span class="keyword">double</span> weight, Date enterenceTime, Clazz clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stuNum = stuNum;</span><br><span class="line">        <span class="keyword">this</span>.stuName = stuName;</span><br><span class="line">        <span class="keyword">this</span>.stuGender = stuGender;</span><br><span class="line">        <span class="keyword">this</span>.stuAge = stuAge;</span><br><span class="line">        <span class="keyword">this</span>.weight = weight;</span><br><span class="line">        <span class="keyword">this</span>.enterenceTime = enterenceTime;</span><br><span class="line">        <span class="keyword">this</span>.clazz = clazz;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;date&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.util.Date&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10001&quot;</span>/&gt;</span>       <span class="comment">&lt;!--字符串类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;3&quot;</span> <span class="attr">value</span>=<span class="string">&quot;21&quot;</span>/&gt;</span>       <span class="comment">&lt;!--简单类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;4&quot;</span> <span class="attr">value</span>=<span class="string">&quot;62.5&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;5&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;date&quot;</span>/&gt;</span>       <span class="comment">&lt;!--对象类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;6&quot;</span>&gt;</span>                  <span class="comment">&lt;!--对象类型--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Clazz&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>集合类型属性</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobbies;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; sets;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> Properties properties;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(List&lt;String&gt; hobbies, Set&lt;String&gt; sets, Map&lt;String, Object&gt; maps, Properties properties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hobbies = hobbies;</span><br><span class="line">        <span class="keyword">this</span>.sets = sets;</span><br><span class="line">        <span class="keyword">this</span>.maps = maps;</span><br><span class="line">        <span class="keyword">this</span>.properties = properties;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>11<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>22<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>33<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>aa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>bb<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>cc<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>key1<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>value1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>key2<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>value2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;k1&quot;</span>&gt;</span>v1<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;k2&quot;</span>&gt;</span>v2<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-5-Bean的作用域"><a href="#2-5-Bean的作用域" class="headerlink" title="2.5 Bean的作用域"></a>2.5 Bean的作用域</h4><blockquote>
<p>在bean标签可以通过scope属性指定对象的的作用域</p>
<ul>
<li>scope=”singleton”  表示当前bean是单例模式（默认饿汉模式，Spring容器初始化阶段就会完成此对象的创建；当在bean标签中设置 lazy-init=”true”变为懒汉模式）</li>
<li>scope=”prototype” 表示当前bean为非单例模式，每次通过Spring容器获取此bean的对象时都会创建一个新的对象</li>
</ul>
</blockquote>
<ul>
<li>单例</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Book&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span> <span class="attr">lazy-init</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>多例</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Book&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="2-6-Bean的声明周期方法"><a href="#2-6-Bean的声明周期方法" class="headerlink" title="2.6 Bean的声明周期方法"></a>2.6 Bean的声明周期方法</h4><blockquote>
<p>在bean标签中通过init-method属性指定当前bean的初始化方法，初始化方法在构造器执行之后执行，通过destroy-method属性指定当前bean的销毁方法，销毁方法在对象销毁之前执行–&gt;</p>
</blockquote>
<ul>
<li><p>Bean类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> bookId;</span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//初始化方法：在创建当前类对象时调用的方法，进行一些资源准备工作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------init&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//销毁方法：在Spring容器销毁对象时调用此方法，进行一些资源回收性的操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------destory&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Spring配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Book&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span><span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destory&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="2-7-自动装配"><a href="#2-7-自动装配" class="headerlink" title="2.7 自动装配"></a>2.7 自动装配</h4><blockquote>
<p>自动装配：Spring在实例化当前bean的时候从Spring容器中找到匹配的实例赋值给当前bean的属性</p>
<p>自动装配策略有两种：</p>
<ul>
<li>byName  根据当前Bean的属性名在Spring容器中寻找匹配的对象 ，如果根据name找打了bean但是类型不匹配则抛出异常</li>
<li>byType  根据当前Bean的属性类型在Spring容器中寻找匹配的对象，如果根据类型找到了多个bean也会抛出异常</li>
</ul>
</blockquote>
<ul>
<li>byName</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Clazz&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Student&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>byType</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazz2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Clazz&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Student&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-8-SpringIoC-工作原理"><a href="#2-8-SpringIoC-工作原理" class="headerlink" title="2.8 SpringIoC 工作原理"></a>2.8 SpringIoC 工作原理</h4><p><img src="/images/Springimgs/1616752252731.png" alt="1616752252731"></p>
<h2 id="三、Spring-IoC-—-基于注解"><a href="#三、Spring-IoC-—-基于注解" class="headerlink" title="三、Spring IoC — 基于注解"></a>三、Spring IoC — 基于注解</h2><blockquote>
<p>SpringIoc的使用，需要我们通过XML将类声明给Spring容器进行管理，从而通过Spring工厂完成对象的创建及属性值的注入；</p>
<p>Spring除了提供基于XML的配置方式，同时提供了基于注解的配置：直接在实体类中添加注解声明给Spring容器管理，以简化开发步骤。</p>
</blockquote>
<h4 id="3-1-Spring框架部署"><a href="#3-1-Spring框架部署" class="headerlink" title="3.1 Spring框架部署"></a>3.1 Spring框架部署</h4><h6 id="3-1-1-创建Maven项目"><a href="#3-1-1-创建Maven项目" class="headerlink" title="3.1.1 创建Maven项目"></a>3.1.1 创建Maven项目</h6><p>略</p>
<h6 id="3-2-2-添加SpringIoC依赖"><a href="#3-2-2-添加SpringIoC依赖" class="headerlink" title="3.2.2 添加SpringIoC依赖"></a>3.2.2 添加SpringIoC依赖</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="3-2-3-创建Spring配置文件"><a href="#3-2-3-创建Spring配置文件" class="headerlink" title="3.2.3 创建Spring配置文件"></a>3.2.3 创建Spring配置文件</h6><ul>
<li>因为Spring容器初始化时，只会加载applicationContext.xml文件，那么我们在实体类中添加的注解就不会被Spring扫描，所以我们需要<code>在applicationContext.xml声明Spring的扫描范围</code>，以达到Spring初始化时扫描带有注解的实体类并完成初始化工作</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 声明使用注解配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 声明Spring工厂注解的扫描范围 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.qfedu.beans&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-2-IoC常用注解"><a href="#3-2-IoC常用注解" class="headerlink" title="3.2 IoC常用注解"></a>3.2 IoC常用注解</h4><h6 id="3-2-1-Component"><a href="#3-2-1-Component" class="headerlink" title="3.2.1 @Component"></a>3.2.1 <code>@Component</code></h6><ul>
<li>类注解，声明此类被Spring容器进行管理，相当于bean标签的作用</li>
<li><code>@Component(value=&quot;stu&quot;)</code> value属性用于指定当前bean的id，相当于bean标签的id属性；value属性也可以省略，如果省略当前类的id默认为类名首字母改小写</li>
<li>除了@Component之外 @Service、@Controller、@Repository这三个注解也可以将类声明给Spring管理，他们主要是语义上的区别<ul>
<li>@Controller 注解主要声明将控制器类配置给Spring管理，例如Servlet</li>
<li>@Service 注解主要声明业务处理类配置Spring管理，Service接口的实现类</li>
<li>@Repository 直接主要声明持久化类配置给Spring管理，DAO接口</li>
<li>@Component 除了控制器、servcie和DAO之外的类一律使用此注解声明</li>
</ul>
</li>
</ul>
<h6 id="3-2-2-Scope"><a href="#3-2-2-Scope" class="headerlink" title="3.2.2 @Scope"></a>3.2.2 <code>@Scope</code></h6><ul>
<li>类注解，用于声明当前类单例模式还是 非单例模式，相当于bean标签的scope属性</li>
<li>@Scope(“prototype”) 表示声明当前类为非单例模式（默认单例模式）</li>
</ul>
<h6 id="3-2-3-Lazy"><a href="#3-2-3-Lazy" class="headerlink" title="3.2.3 @Lazy"></a>3.2.3 <code>@Lazy</code></h6><ul>
<li>类注解，用于声明一个单例模式的Bean是否为懒汉模式</li>
<li>@Lazy(true) 表示声明为懒汉模式，默认为饿汉模式</li>
</ul>
<h6 id="3-2-4-PostConstruct"><a href="#3-2-4-PostConstruct" class="headerlink" title="3.2.4 @PostConstruct"></a>3.2.4 <code>@PostConstruct</code></h6><ul>
<li>方法注解，声明一个方法为当前类的初始化方法（在构造器之后执行），相当于bean标签的init-method属性</li>
</ul>
<h6 id="3-2-5-PreDestroy"><a href="#3-2-5-PreDestroy" class="headerlink" title="3.2.5 @PreDestroy"></a>3.2.5 <code>@PreDestroy</code></h6><ul>
<li>方法注解，声明一个方法为当前类的销毁方法（在对象从容器中释放之前执行），相当于bean标签的destory-method属性</li>
</ul>
<h6 id="3-2-6-Autowired"><a href="#3-2-6-Autowired" class="headerlink" title="3.2.6 @Autowired"></a>3.2.6 <code>@Autowired</code></h6><ul>
<li><p>属性注解、方法注解（set方法），声明当前属性自动装配，默认byType</p>
</li>
<li><p> @Autowired(required = false)  通过requried属性设置当前自动装配是否为必须（默认必须——如果没有找到类型与属性类型匹配的bean则抛出异常）</p>
</li>
<li><p>byType</p>
</li>
<li><p>ref引用</p>
</li>
</ul>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClazz</span><span class="params">(<span class="meta">@Qualifier(&quot;c2&quot;)</span> Clazz clazz)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.clazz = clazz;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="3-2-7-Resource"><a href="#3-2-7-Resource" class="headerlink" title="3.2.7 @Resource"></a>3.2.7 <code>@Resource</code></h6><ul>
<li>属性注解，也用于声明属性自动装配</li>
<li>默认装配方式为byName，如果根据byName没有找到对应的bean，则继续根据byType寻找对应的bean，根据byType如果依然没有找到Bean或者找到不止一个类型匹配的bean,则抛出异常。</li>
</ul>
<h2 id="四、代理设计模式"><a href="#四、代理设计模式" class="headerlink" title="四、代理设计模式"></a>四、代理设计模式</h2><h4 id="4-1-生活中的代理"><a href="#4-1-生活中的代理" class="headerlink" title="4.1 生活中的代理"></a>4.1 生活中的代理</h4><p><img src="/images/Springimgs/1616999162162.png" alt="1616999162162"></p>
<p>代理设计模式的优点：将通用性的工作都交给代理对象完成，被代理对象只需专注自己的核心业务。</p>
<h4 id="4-2-静态代理"><a href="#4-2-静态代理" class="headerlink" title="4.2 静态代理"></a>4.2 静态代理</h4><blockquote>
<p>静态代理，代理类只能够为特定的类生产代理对象，不能代理任意类</p>
</blockquote>
<p><img src="/images/Springimgs/1617001027208.png" alt="1617001027208"></p>
<p><strong>使用代理的好处</strong></p>
<p>1.被代理类中只用关注核心业务的实现，将通用的管理型逻辑（事务管理、日志管理）和业务逻辑分离</p>
<p>2.将通用的代码放在代理类中实现，提供了代码的复用性</p>
<p>3.通过在代理类添加业务逻辑，实现对原有业务逻辑的扩展（增强）</p>
<h4 id="4-3-动态代理"><a href="#4-3-动态代理" class="headerlink" title="4.3 动态代理"></a>4.3 动态代理</h4><blockquote>
<p>动态代理，几乎可以为所有的类产生代理对象</p>
<p>动态代理的实现方式有2种：</p>
<ul>
<li>JDK动态代理</li>
<li>CGLib动态大力</li>
</ul>
</blockquote>
<h6 id="4-3-1-JDK动态代理"><a href="#4-3-1-JDK动态代理" class="headerlink" title="4.3.1 JDK动态代理"></a>4.3.1 JDK动态代理</h6><ul>
<li>JDK动态代理类实现：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * JDK动态代理：是通过被代理对象实现的接口产生其代理对象的</span></span><br><span class="line"><span class="comment"> * 1.创建一个类，实现InvocationHandler接口，重写invoke方法</span></span><br><span class="line"><span class="comment"> * 2.在类种定义一个Object类型的变量，并提供这个变量的有参构造器，用于将被代理对象传递进来</span></span><br><span class="line"><span class="comment"> * 3.定义getProxy方法，用于创建并返回代理对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDKDynamicProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">//被代理对象</span></span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JDKDynamicProxy</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//产生代理对象，返回代理对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.获取被代理对象的类加载器</span></span><br><span class="line">        ClassLoader classLoader = obj.getClass().getClassLoader();</span><br><span class="line">        <span class="comment">//2.获取被代理对象的类实现的接口</span></span><br><span class="line">        Class&lt;?&gt;[] interfaces = obj.getClass().getInterfaces();</span><br><span class="line">        <span class="comment">//3.产生代理对象(通过被代理对象的类加载器及实现的接口)</span></span><br><span class="line">        <span class="comment">//第一个参数：被代理对象的类加载器</span></span><br><span class="line">        <span class="comment">//第二个参数：被代理对象实现的接口</span></span><br><span class="line">        <span class="comment">//第三个参数：使用产生代理对象调用方法时，用于拦截方法执行的处理器</span></span><br><span class="line">        Object proxy = Proxy.newProxyInstance(classLoader, interfaces,<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">return</span> proxy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        begin();</span><br><span class="line">        Object returnValue = method.invoke(obj,args);  <span class="comment">//执行method方法（insert）</span></span><br><span class="line">        commit();</span><br><span class="line">        <span class="keyword">return</span> returnValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">begin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----------开启事务&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----------提交事务&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//创建被代理对象</span></span><br><span class="line">BookDAOImpl bookDAO = <span class="keyword">new</span> BookDAOImpl();</span><br><span class="line">StudentDAOImpl studentDAO = <span class="keyword">new</span> StudentDAOImpl();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建动态代理类对象，并将被代理对象传递到代理类中赋值给obj</span></span><br><span class="line">JDKDynamicProxy jdkDynamicProxy = <span class="keyword">new</span> JDKDynamicProxy(studentDAO);</span><br><span class="line"></span><br><span class="line"><span class="comment">//proxy就是产生的代理对象:产生的代理对象可以强转成被代理对象实现的接口类型</span></span><br><span class="line">GenaralDAO proxy = (GenaralDAO)jdkDynamicProxy.getProxy();</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用代理对象调用方法，并不会执行调用的方法，而是进入到创建代理对象时指定的InvocationHandler类种的invoke方法</span></span><br><span class="line"><span class="comment">//调用的方法作为一个Method参数，传递给了invoke方法</span></span><br><span class="line">proxy.insert(student);</span><br></pre></td></tr></table></figure>

<h6 id="4-3-2-CGLib动态代理"><a href="#4-3-2-CGLib动态代理" class="headerlink" title="4.3.2 CGLib动态代理"></a>4.3.2 CGLib动态代理</h6><blockquote>
<p>由于JDK动态代理是通过被代理类实现的接口来创建代理对象的，因此JDK动态代理只能代理实现了接口的类的对象。如果一个类没有实现任何接口，该如何产生代理对象呢？</p>
<p>CGLib动态代理，是通过创建被代理类的子类来创建代理对象的，因此即使没有实现任何接口的类也可以通过CGLib产生代理对象</p>
<p>CGLib动态代理不能为final类创建代理对象</p>
</blockquote>
<ul>
<li>添加CGLib的依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/cglib/cglib --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>CGLib动态代理实现：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.添加cglib依赖</span></span><br><span class="line"><span class="comment"> * 2.创建一个类，实现MethodInterceptor接口，同时实现接口中的intercept方法</span></span><br><span class="line"><span class="comment"> * 3.在类中定义一个Object类型的变量，并提供这个变量的有参构造器，用于传递被代理对象</span></span><br><span class="line"><span class="comment"> * 4.定义getProxy方法创建并返回代理对象（代理对象是通过创建被代理类的子类来创建的）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CGLibDynamicProxy</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CGLibDynamicProxy</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        enhancer.setSuperclass(obj.getClass());</span><br><span class="line">        enhancer.setCallback(<span class="keyword">this</span>);</span><br><span class="line">        Object proxy = enhancer.create();</span><br><span class="line">        <span class="keyword">return</span> proxy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        begin();</span><br><span class="line">        Object returnValue = method.invoke(obj,objects); <span class="comment">//通过反射调用被代理类的方法</span></span><br><span class="line">        commit();</span><br><span class="line">        <span class="keyword">return</span> returnValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">begin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----------开启事务&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----------提交事务&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建被代理对象</span></span><br><span class="line">BookDAOImpl bookDAO = <span class="keyword">new</span> BookDAOImpl();</span><br><span class="line">StudentDAOImpl studentDAO = <span class="keyword">new</span> StudentDAOImpl();</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过cglib动态代理类创建代理对象</span></span><br><span class="line">CGLibDynamicProxy cgLibDynamicProxy = <span class="keyword">new</span> CGLibDynamicProxy(bookDAO);</span><br><span class="line"><span class="comment">//代理对象实际上是被代理对象子类，因此代理对象可直接强转为被代理类类型</span></span><br><span class="line">BookDAOImpl proxy = (BookDAOImpl) cgLibDynamicProxy.getProxy();</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用对象调用方法，实际上并没有执行这个方法，而是执行了代理类中的intercept方法，将当前调用的方法以及方法中的参数传递到intercept方法</span></span><br><span class="line">proxy.update();</span><br></pre></td></tr></table></figure>

<h2 id="五、Spring-AOP"><a href="#五、Spring-AOP" class="headerlink" title="五、Spring AOP"></a>五、Spring AOP</h2><h4 id="5-1-AOP-概念"><a href="#5-1-AOP-概念" class="headerlink" title="5.1 AOP 概念"></a>5.1 AOP 概念</h4><blockquote>
<p>Aspect Oriented Programming 面向切面编程，是一种利用“横切”的技术（底层实现就是动态代理），对原有的业务逻辑进行拦截，并且可以在这个拦截的横切面上添加特定的业务逻辑，对原有的业务进行增强。</p>
<p>基于动态代理实现在不改变原有业务的情况下对业务逻辑进行增强</p>
</blockquote>
<p><img src="/images/Springimgs/1617008695615.png" alt="1617008695615"></p>
<h4 id="5-2-Spring-AOP框架部署"><a href="#5-2-Spring-AOP框架部署" class="headerlink" title="5.2 Spring AOP框架部署"></a>5.2 Spring AOP框架部署</h4><h6 id="5-2-1-创建Maven项目"><a href="#5-2-1-创建Maven项目" class="headerlink" title="5.2.1 创建Maven项目"></a>5.2.1 创建Maven项目</h6><h6 id="5-2-2-添加依赖"><a href="#5-2-2-添加依赖" class="headerlink" title="5.2.2 添加依赖"></a>5.2.2 添加依赖</h6><ul>
<li>context</li>
<li>aspects</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="5-2-3-创建spring配置文件"><a href="#5-2-3-创建spring配置文件" class="headerlink" title="5.2.3 创建spring配置文件"></a>5.2.3 创建spring配置文件</h6><ul>
<li>需要引入aop的命名空间</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="5-3-AOP配置—基于XML"><a href="#5-3-AOP配置—基于XML" class="headerlink" title="5.3 AOP配置—基于XML"></a>5.3 AOP配置—基于XML</h4><blockquote>
<p>在DAO的方法添加开启事务和提交事务的逻辑</p>
</blockquote>
<h6 id="5-3-1-创建一个类，定义要添加的业务逻辑"><a href="#5-3-1-创建一个类，定义要添加的业务逻辑" class="headerlink" title="5.3.1 创建一个类，定义要添加的业务逻辑"></a>5.3.1 创建一个类，定义要添加的业务逻辑</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">begin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------开启事务&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------提交事务&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="5-3-2-配置aop"><a href="#5-3-2-配置aop" class="headerlink" title="5.3.2 配置aop"></a>5.3.2 配置aop</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDAO&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.dao.BookDAOImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentDAO&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.dao.StudentDAOImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!----&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;txManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.utils.TxManager&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--声明切入点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;book_all&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.qfedu.dao.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--声明txManager为切面类--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;txManager&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--通知--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;begin&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;book_all&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;commit&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;book_all&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>AOP开发步骤</code>：</p>
<p>1.创建切面类，在切面类定义切点方法</p>
<p>2.将切面类配置给Spring容器</p>
<p>3.声明切入点</p>
<p>4.配置AOP的通知策略</p>
<h4 id="5-4-切入点的声明"><a href="#5-4-切入点的声明" class="headerlink" title="5.4 切入点的声明"></a>5.4 切入点的声明</h4><h6 id="5-4-1-各种切入点声明方式"><a href="#5-4-1-各种切入点声明方式" class="headerlink" title="5.4.1 各种切入点声明方式"></a>5.4.1 各种切入点声明方式</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用aop:pointcut标签声明切入点：切入点可以是一个方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;book_insert&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.qfedu.dao.BookDAOImpl.insert())&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--BookDAOImpl类中所有无参数无返回值的方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;book_pc1&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(void com.qfedu.dao.BookDAOImpl.*())&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--BookDAOImpl类中所有无返回值的方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;book_pc2&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(void com.qfedu.dao.BookDAOImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--BookDAOImpl类中所有无参数的方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;book_pc3&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.qfedu.dao.BookDAOImpl.*())&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--BookDAOImpl类中所有方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;book_pc4&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.qfedu.dao.BookDAOImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--dao包中所有类中的所有方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pc5&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.qfedu.dao.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--dao包中所有类中的insert方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pc6&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.qfedu.dao.*.insert(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--dao包中所有类中的insert方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pc7&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* *(..))&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="5-4-2-AOP使用注意事项"><a href="#5-4-2-AOP使用注意事项" class="headerlink" title="5.4.2 AOP使用注意事项"></a>5.4.2 AOP使用注意事项</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果要使用Spring aop面向切面编程，调用切入点方法的对象必须通过Spring容器获取</span></span><br><span class="line"><span class="comment">//如果一个类中的方法被声明为切入点并且织入了切点之后，通过Spring容器获取该类对象，实则获取到的是一个代理对象</span></span><br><span class="line"><span class="comment">//如果一个类中的方法没有被声明为切入点，通过Spring容器获取的就是这个类真实创建的对象</span></span><br><span class="line"><span class="comment">//BookServiceImpl bookService = new BookServiceImpl();</span></span><br><span class="line">BookServiceImpl bookService = (BookServiceImpl) context.getBean(<span class="string">&quot;bookServiceImpl&quot;</span>);</span><br><span class="line">bookService.addBook();</span><br></pre></td></tr></table></figure>

<h4 id="5-5-AOP通知策略"><a href="#5-5-AOP通知策略" class="headerlink" title="5.5 AOP通知策略"></a>5.5 AOP通知策略</h4><blockquote>
<p> AOP通知策略：就是声明将切面类中的切点方法如何织入到切入点</p>
<ul>
<li>before</li>
<li>after</li>
<li>after-throwing</li>
<li>after-returning</li>
<li>around</li>
</ul>
</blockquote>
<h6 id="5-5-1-定义切面类"><a href="#5-5-1-定义切面类" class="headerlink" title="5.5.1 定义切面类"></a>5.5.1 定义切面类</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;~~~~~~~method1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;~~~~~~~method2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;~~~~~~~method3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;~~~~~~~method4&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//环绕通知的切点方法，必须准守如下的定义规则：</span></span><br><span class="line">    <span class="comment">//1.必须带有一个ProceedingJoinPoint类型的参数</span></span><br><span class="line">    <span class="comment">//2.必须有Object类型的返回值</span></span><br><span class="line">    <span class="comment">//3.在前后增强的业务逻辑之间执行Object v = point.proceed();</span></span><br><span class="line">    <span class="comment">//4.方法最后返回v</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">method5</span><span class="params">(ProceedingJoinPoint point)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;~~~~~~~method5---before&quot;</span>);</span><br><span class="line">        <span class="comment">//此代码的执行，就表示切入点方法的执行</span></span><br><span class="line">        Object v = point.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;~~~~~~~method5---after&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="5-5-2-配置切面类"><a href="#5-5-2-配置切面类" class="headerlink" title="5.5.2 配置切面类"></a>5.5.2 配置切面类</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myAspect&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.utils.MyAspect&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用aop:pointcut标签声明切入点：切入点可以是一个方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;book_insert&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.qfedu.dao.BookDAOImpl.insert())&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;myAspect&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--aop:before 前置通知，切入到指定切入点之前--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;method1&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;book_insert&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--aop:after 后置通知，切入到指定切入点之后--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;method2&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;book_insert&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--aop:after-throwing 异常通知，切入点抛出异常之后--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">&quot;method3&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;book_insert&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--aop:after-returning 方法返回值返回之后，对于一个Java方法而言return返回值也是方法的一部分</span></span><br><span class="line"><span class="comment">             因此“方法返回值返回之后”和“方法执行结束”是同一个时间点，随意after 和 after-returning根据配置</span></span><br><span class="line"><span class="comment">             的顺序决定执行顺序--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;method4&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;book_insert&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">&quot;method5&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;book_insert&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="六、Spring-AOP-注解配置"><a href="#六、Spring-AOP-注解配置" class="headerlink" title="六、Spring AOP 注解配置"></a>六、Spring AOP 注解配置</h2><h4 id="6-1-Spring-AOP-注解配置框架部署"><a href="#6-1-Spring-AOP-注解配置框架部署" class="headerlink" title="6.1 Spring AOP 注解配置框架部署"></a>6.1 Spring AOP 注解配置框架部署</h4><h6 id="6-1-1-创建Maven工程"><a href="#6-1-1-创建Maven工程" class="headerlink" title="6.1.1 创建Maven工程"></a>6.1.1 创建Maven工程</h6><h6 id="6-1-2-添加Spring依赖"><a href="#6-1-2-添加Spring依赖" class="headerlink" title="6.1.2 添加Spring依赖"></a>6.1.2 添加Spring依赖</h6><ul>
<li>context</li>
<li>aspects</li>
</ul>
<h6 id="6-1-3-Spring配置文件"><a href="#6-1-3-Spring配置文件" class="headerlink" title="6.1.3 Spring配置文件"></a>6.1.3 Spring配置文件</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>&gt;</span><span class="tag">&lt;/<span class="name">context:annotation-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.qfedu&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  基于注解配置的aop代理  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="6-2-AOP注解配置案例"><a href="#6-2-AOP注解配置案例" class="headerlink" title="6.2 AOP注解配置案例"></a>6.2 AOP注解配置案例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.qfedu.dao.*.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pc1</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;pc1()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">begin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;~~~~开启事务&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;pc1()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;~~~~提交事务&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;pc1()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">printExecuteTime</span><span class="params">(ProceedingJoinPoint point)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> time1 = System.currentTimeMillis();</span><br><span class="line">        Object v = point.proceed();</span><br><span class="line">        <span class="keyword">long</span> time2 = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;----time:&quot;</span>+(time2-time1));</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>注意</code>：注解使用虽然方便，但是只能在源码上添加注解，因此我们的自定义类提倡使用注解配置；但如果如果使用到第三方提供的类则需要通过xml配置形式完成配置。</p>
<h2 id="七、Spring整合MyBatis"><a href="#七、Spring整合MyBatis" class="headerlink" title="七、Spring整合MyBatis"></a>七、Spring整合MyBatis</h2><blockquote>
<p>Spring两大核心思想：IoC 和 AOP</p>
<p>IoC : 控制反转，Spring容器可以完成对象的创建、属性注入、对象管理等工作</p>
<p>AOP : 面向切面，在不修改原有业务逻辑的情况下，实现原有业务的增强</p>
</blockquote>
<h4 id="7-1-Spring可以对MyBatis提供哪些支持？"><a href="#7-1-Spring可以对MyBatis提供哪些支持？" class="headerlink" title="7.1 Spring可以对MyBatis提供哪些支持？"></a>7.1 Spring可以对MyBatis提供哪些支持？</h4><ul>
<li><p><strong>IoC支持</strong> SpringIoC 可以为MyBatis完成DataSource、SqlSessionFactory、SqlSession以及DAO对象的创建</p>
</li>
<li><p><strong>AOP支持</strong>使用Spring提供的事务管理切面类完成对MyBatis数据库操作中的事务管理</p>
</li>
</ul>
<h4 id="7-2-Spring整合MyBatis准备工作"><a href="#7-2-Spring整合MyBatis准备工作" class="headerlink" title="7.2 Spring整合MyBatis准备工作"></a>7.2 Spring整合MyBatis准备工作</h4><h6 id="7-2-1-创建Maven工程"><a href="#7-2-1-创建Maven工程" class="headerlink" title="7.2.1 创建Maven工程"></a>7.2.1 创建Maven工程</h6><h6 id="7-2-2-部署MyBatis框架"><a href="#7-2-2-部署MyBatis框架" class="headerlink" title="7.2.2 部署MyBatis框架"></a>7.2.2 部署MyBatis框架</h6><ul>
<li>添加依赖<ul>
<li>Mysql驱动</li>
<li>mybatis</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li> 创建MyBatis配置文件(创建配置文件之后无需进行任何配置)</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="7-2-3-部署Spring框架"><a href="#7-2-3-部署Spring框架" class="headerlink" title="7.2.3 部署Spring框架"></a>7.2.3 部署Spring框架</h6><ul>
<li>添加依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>创建Spring配置文件：applicationContext.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="7-2-4-添加Spring整合MyBatis的依赖"><a href="#7-2-4-添加Spring整合MyBatis的依赖" class="headerlink" title="7.2.4 添加Spring整合MyBatis的依赖"></a>7.2.4 添加Spring整合MyBatis的依赖</h6><ul>
<li>mybatis-spring  就是mybatis提供的兼容Spring的补丁</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="7-3-Spring整合MyBatis整合IoC配置"><a href="#7-3-Spring整合MyBatis整合IoC配置" class="headerlink" title="7.3 Spring整合MyBatis整合IoC配置"></a>7.3 Spring整合MyBatis整合IoC配置</h4><h6 id="7-3-1-整合Druid连接池"><a href="#7-3-1-整合Druid连接池" class="headerlink" title="7.3.1 整合Druid连接池"></a>7.3.1 整合Druid连接池</h6><ul>
<li>添加druid的依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>创建druid.properties属性文件</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">druid.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">druid.url</span>=<span class="string">jdbc:mysql://localhost:3306/db_2010_mybatis?characterEncoding=utf-8</span></span><br><span class="line"><span class="meta">druid.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">druid.password</span>=<span class="string">admin123</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">## 连接池参数</span></span><br><span class="line"><span class="meta">druid.pool.init</span>=<span class="string">1</span></span><br><span class="line"><span class="meta">druid.pool.minIdle</span>=<span class="string">3</span></span><br><span class="line"><span class="meta">druid.pool.maxActive</span>=<span class="string">20</span></span><br><span class="line"><span class="meta">druid.pool.timeout</span>=<span class="string">30000</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在applicationContext.xml中配置DruidDataSource</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--加载druid.properties属性文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:druid.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--依赖Spring容器完成数据源DataSource的创建--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;druidDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;druid.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;druid.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;druid.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;druid.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;druid.pool.init&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;druid.pool.minIdle&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxActive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;druid.pool.maxActive&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxWait&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;druid.pool.timeout&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="7-3-2-整合MyBatis—创建SqlSessionFactory"><a href="#7-3-2-整合MyBatis—创建SqlSessionFactory" class="headerlink" title="7.3.2 整合MyBatis—创建SqlSessionFactory"></a>7.3.2 整合MyBatis—创建SqlSessionFactory</h6><blockquote>
<p>依赖Spring容器创建MyBatis的SqlSessionFactory对象</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--依赖Spring容器完成MyBatis的SqlSessionFactory对象的创建--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span> &gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;druidDataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置mapper文件的路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mappers/*Mapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置需要定义别名的实体类的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliasesPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.qfedu.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--可选：配置MyBatis的主配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="7-3-3-整合MyBatis-创建Mapper"><a href="#7-3-3-整合MyBatis-创建Mapper" class="headerlink" title="7.3.3 整合MyBatis-创建Mapper"></a>7.3.3 整合MyBatis-创建Mapper</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--加载dao包中的所有DAO接口，通过sqlSessionFactory获取SqlSession，然后创建所有的DAO接口对象，存储在Spring容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.qfedu.dao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="7-4-Spring整合MyBatis整合AOP配置"><a href="#7-4-Spring整合MyBatis整合AOP配置" class="headerlink" title="7.4 Spring整合MyBatis整合AOP配置"></a>7.4 Spring整合MyBatis整合AOP配置</h4><blockquote>
<p>使用Spring提供的事务管理切面类 完成DAO中增删改操作的事务管理</p>
</blockquote>
<h6 id="7-4-1-事务的隔离级别"><a href="#7-4-1-事务的隔离级别" class="headerlink" title="7.4.1 事务的隔离级别"></a>7.4.1 事务的隔离级别</h6><blockquote>
<p> isolation 设置事务隔离级别：READ_UNCOMMITTED  ,READ_COMMITTED , REPEATABLE_READ , SERIALIZABLE</p>
</blockquote>
<p><img src="/images/Springimgs/1617093621853.png" alt="1617093621853"></p>
<h6 id="7-4-2-事务的传播机制"><a href="#7-4-2-事务的传播机制" class="headerlink" title="7.4.2 事务的传播机制"></a>7.4.2 事务的传播机制</h6><p> propagation 设置事务的传播机制    </p>
<ul>
<li><p>REQUIRED 如果上层方法没有事务，则创建一个新的事务；如果已经存在事务，则加入到事务中。    </p>
</li>
<li><p>SUPPORTS 如果上层方法没有事务，则以非事务方式执行；如果已经存在事务，则加入到事务中。</p>
</li>
<li><p>REQUIRES_NEW 如果上层方法没有事务，则创建一个新的事务；如果已经存在事务，则将当前事务挂起。 </p>
</li>
<li><p>NOT_SUPPORTED 如果上层方法没有事务，则以非事务方式执行；如果已经存在事务，则将当前事务挂起。    </p>
</li>
<li><p>NEVER 如果上层方法没有事务，则以非事务方式执行；如果已经存在事务，则抛出异常。    </p>
</li>
<li><p>MANDATORY 如果上层方法已经存在事务，则加入到事务中执行；如果不存在事务则抛出异常。    </p>
</li>
<li><p>NESTED 如果上层方法没有事务，则创建一个新的事务；如果已经存在事务，则嵌套到当前事务中。</p>
</li>
</ul>
<h6 id="7-4-3-Spring-AOP事务管理配置—XML配置"><a href="#7-4-3-Spring-AOP事务管理配置—XML配置" class="headerlink" title="7.4.3 Spring AOP事务管理配置—XML配置"></a>7.4.3 Spring AOP事务管理配置—XML配置</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--1.将Spring提供的事务管理配置配置给Spring容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;druidDataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--2.通过Spring jdbc提供的 tx标签，声明事务管理策略--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;insert*&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;REPEATABLE_READ&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;delete*&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;REPEATABLE_READ&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;update*&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;REPEATABLE_READ&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;query*&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;REPEATABLE_READ&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;SUPPORTS&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--3.将事务管理策略以AOP配置 应用于DAO操作方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;crud&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.qfedu.service.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;crud&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="7-4-4-Spring-AOP事务管理配置—注解配置"><a href="#7-4-4-Spring-AOP事务管理配置—注解配置" class="headerlink" title="7.4.4 Spring AOP事务管理配置—注解配置"></a>7.4.4 Spring AOP事务管理配置—注解配置</h6><ul>
<li>在applicationContext.xml中配置事务管理，声明使用注解方式进行事务配置</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用注解进行事务管理前提是 IoC需要进行注解配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.qfedu&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--1.将Spring提供的事务管理配置配置给Spring容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;druidDataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--2.声明使用注解完成事务配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在需要Spring进行事务管理的方法上添加<code>@Transactional</code>注解</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(isolation = Isolation.REPEATABLE_READ ,propagation = Propagation.SUPPORTS )</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">listUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userDAO.queryUsers();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="八、基于Spring的单元测试"><a href="#八、基于Spring的单元测试" class="headerlink" title="八、基于Spring的单元测试"></a>八、基于Spring的单元测试</h2><blockquote>
<p>如果想要使用Spring容器实现属性注入、实现AOP面向切面编程，对象必须通过Spring容器获取；为了便于Spring环境下的测试，Spring提供了test组件，专门针对Spring环境进行单元测试。</p>
</blockquote>
<h4 id="8-1-添加依赖"><a href="#8-1-添加依赖" class="headerlink" title="8.1 添加依赖"></a>8.1 添加依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="8-2-编写单元测试类"><a href="#8-2-编写单元测试类" class="headerlink" title="8.2 编写单元测试类"></a>8.2 编写单元测试类</h4><h6 id="8-2-1-创建一个单元测试类"><a href="#8-2-1-创建一个单元测试类" class="headerlink" title="8.2.1 创建一个单元测试类"></a>8.2.1 创建一个单元测试类</h6><p>略</p>
<h6 id="8-2-2-添加注解"><a href="#8-2-2-添加注解" class="headerlink" title="8.2.2 添加注解"></a>8.2.2 添加注解</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.通过@RunWith 声明当前测试类位于Spring容器环境（被Spring容器管理）</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="comment">//2.通过@ContextConfiguration 声明当前测试环境的Spring容器运行时加载的配置文件</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImplTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//因为当前测试类是基于Spring容器运行的，当前测试类的对象是通过Spring容器创建的</span></span><br><span class="line">    <span class="comment">//因此可以通过Spring容器实现属性的注入</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userServiceImpl2;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userServiceImpl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userServiceImpl.listUsers();</span><br><span class="line">        System.out.println(users);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参考：<a href="https://www.bilibili.com/video/BV19A411v71q?spm_id_from=333.1007.top_right_bar_window_history.content.click&vd_source=ab7b53f789ecf6dd41c74d59dff5a273">关联教学视频</a></p>
<p>*注： 本课程案例来自千峰教育，如有涉及侵权，请联系，将尽快删除</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
        <tag>IOC</tag>
        <tag>DI</tag>
        <tag>AoP</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven用法总结</title>
    <url>/2022/08/19/Maven/</url>
    <content><![CDATA[<h2 id="一、Maven简介"><a href="#一、Maven简介" class="headerlink" title="一、Maven简介"></a>一、Maven简介</h2><h4 id="1-1-在项目中如何导入jar包？"><a href="#1-1-在项目中如何导入jar包？" class="headerlink" title="1.1 在项目中如何导入jar包？"></a>1.1 在项目中如何导入jar包？</h4><ul>
<li>下载jar包 （mvn）</li>
<li>将下载的jar包拷贝到项目中（WEB-INF/lib）</li>
<li>选择jar文件–右键–Add as Library</li>
</ul>
<h4 id="1-2-传统导入jar包的方式存在什么问题？"><a href="#1-2-传统导入jar包的方式存在什么问题？" class="headerlink" title="1.2 传统导入jar包的方式存在什么问题？"></a>1.2 传统导入jar包的方式存在什么问题？</h4><ul>
<li>步骤多（相对）——<code>繁琐</code></li>
<li>在不同的项目中如果需要相同的jar包，需要分别存储这个jar文件——<code>冗余</code>、<code>项目体积大</code></li>
<li>在不同的环境下可能因为jar文件版本不一致导致项目无法运行（重新配置）——<code>移植性差</code></li>
</ul>
<h4 id="1-3-项目生命周期"><a href="#1-3-项目生命周期" class="headerlink" title="1.3 项目生命周期"></a>1.3 项目生命周期</h4><blockquote>
<p>项目从编译到运行的整个过程</p>
<p>完整的生命周期：清理缓存—校验—编译—测试—打包—安装—部署</p>
</blockquote>
<ul>
<li>IDEA提供了一键构建项目的功能，但是如果我们需要自定义的生命周期管理，却没有现成的工具（清理缓存）</li>
</ul>
<h4 id="1-4-Maven简介"><a href="#1-4-Maven简介" class="headerlink" title="1.4 Maven简介"></a>1.4 Maven简介</h4><blockquote>
<p>Maven是一个<code>基于项目对象模型（POM）用于进行项目的依赖管理、生命周期管理的</code>工具软件</p>
</blockquote>
<p><strong>核心功能</strong></p>
<ul>
<li><p>依赖管理</p>
</li>
<li><p>生命周期管理</p>
</li>
<li><p>聚合工程</p>
</li>
</ul>
<h2 id="二、Maven安装及配置"><a href="#二、Maven安装及配置" class="headerlink" title="二、Maven安装及配置"></a>二、Maven安装及配置</h2><h4 id="2-1-Maven下载"><a href="#2-1-Maven下载" class="headerlink" title="2.1 Maven下载"></a>2.1 Maven下载</h4><ul>
<li><a href="http://maven.apache.org/download.cgi">http://maven.apache.org/download.cgi</a></li>
</ul>
<h4 id="2-2-Maven安装"><a href="#2-2-Maven安装" class="headerlink" title="2.2 Maven安装"></a>2.2 Maven安装</h4><blockquote>
<p>Maven是基于Java语言进行开发的，因此依赖JDK（建议JDK1.7+）</p>
<p>开箱即用：直接解压即可</p>
</blockquote>
<ul>
<li>解压（d:/mvn）</li>
<li>目录结构：<ul>
<li>bin  存放指令文件（Maven提供了一个mvn指令）</li>
<li>boot 包含了一个类加载框架的jar文件</li>
<li>conf  包含了Maven的核心配置文件settings.xml</li>
<li>lib  存放了maven运行所需的jar文件</li>
</ul>
</li>
</ul>
<h4 id="2-3-配置环境变量"><a href="#2-3-配置环境变量" class="headerlink" title="2.3 配置环境变量"></a>2.3 配置环境变量</h4><ul>
<li><p><code>MAVEN_HOME</code>       D:\mvn\apache-maven-3.6.3</p>
</li>
<li><p><code>Path</code>   增加   %MAVEN_HOME%\bin</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>测试</th>
</tr>
</thead>
<tbody><tr>
<td><img src="/images/Mavenimgs/1615948601495.png" alt="1615948601495"></td>
</tr>
</tbody></table>
<h2 id="三、Maven的项目结构"><a href="#三、Maven的项目结构" class="headerlink" title="三、Maven的项目结构"></a>三、Maven的项目结构</h2><blockquote>
<p> 使用Maven进行项目还有一个好处：无论使用什么样 的开发工具（eclipse/idea）项目的结构是统一的。</p>
</blockquote>
<h4 id="3-1-Maven的项目结构"><a href="#3-1-Maven的项目结构" class="headerlink" title="3.1 Maven的项目结构"></a>3.1 Maven的项目结构</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fmwy(项目名称)</span><br><span class="line">--src</span><br><span class="line">  --main (存放项目的源文件)</span><br><span class="line">    --java (存放java代码，相当于传统项目中的src目录)</span><br><span class="line">    --resources (存放配置文件和静态资源的目录，相当于传统项目的web目录)</span><br><span class="line">  --test (存放项目的单元测试代码)</span><br><span class="line">    --java（测试代码）</span><br><span class="line">--pom.xml</span><br></pre></td></tr></table></figure>

<h4 id="3-2-pom-xml"><a href="#3-2-pom-xml" class="headerlink" title="3.2 pom.xml"></a>3.2 pom.xml</h4><blockquote>
<p>POM Project Object Model，Maven可以根据pom文件的配置对此项目进行依赖管理；也就是说项目中需要依赖，直接在pom.xml进行配置即可</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定项目模型版本--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定项目的标识：G 企业标识 A 项目标识 V 版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.qfedu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fmwy<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--配置当前项目的依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    	</span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果需要在当前项目中添加依赖，只需在pom.xml文件中进行依赖配置即可</p>
</blockquote>
<p><strong>配置依赖</strong> 找到依赖的坐标，添加dependencies标签即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="四、依赖管理"><a href="#四、依赖管理" class="headerlink" title="四、依赖管理"></a>四、依赖管理</h2><h4 id="4-1-Maven依赖管理的流程"><a href="#4-1-Maven依赖管理的流程" class="headerlink" title="4.1 Maven依赖管理的流程"></a>4.1 Maven依赖管理的流程</h4><p><img src="/images/Mavenimgs/1615952656309.png" alt="1615952656309"></p>
<h4 id="4-2-Maven仓库介绍"><a href="#4-2-Maven仓库介绍" class="headerlink" title="4.2 Maven仓库介绍"></a>4.2 Maven仓库介绍</h4><ul>
<li><code>本地仓库</code>  就是本地计算机上的某个文件夹（可以是自定义的任何文件夹）</li>
<li><code>远程仓库</code>  就是远程主机上的jar文件仓库<ul>
<li><code>中央仓库</code>  maven官方提供的仓库，包含了所需的一切依赖（免配置）</li>
<li><code>公共仓库</code> 除了中央仓库以外的第三方仓库都是公共仓库，例如aliyun（需要配置）</li>
<li><code>私服</code> 企业搭建的供内部使用的maven仓库</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>maven仓库</th>
</tr>
</thead>
<tbody><tr>
<td><img src="/images/Mavenimgs/1615953762130.png" alt="1615953762130"></td>
</tr>
</tbody></table>
<h4 id="4-3-Maven仓库配置"><a href="#4-3-Maven仓库配置" class="headerlink" title="4.3 Maven仓库配置"></a>4.3 Maven仓库配置</h4><blockquote>
<p>在maven_home/conf/settings.xml中进行配置</p>
</blockquote>
<p><strong>配置本地仓库</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>d:\repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>配置公共仓库</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="五、项目生命周期管理"><a href="#五、项目生命周期管理" class="headerlink" title="五、项目生命周期管理"></a>五、项目生命周期管理</h2><h4 id="5-1-生命周期介绍"><a href="#5-1-生命周期介绍" class="headerlink" title="5.1 生命周期介绍"></a>5.1 生命周期介绍</h4><blockquote>
<p>项目构建的声明周期：项目开发结束之后部署到运行环境运行的过程</p>
<ul>
<li>清除缓存</li>
<li>检查</li>
<li>编译</li>
<li>测试（就会执行maven项目中test目录下的单元测试）</li>
<li>打包（war 、 jar）</li>
<li>安装 （jar会被安装到本地仓库）</li>
<li>部署 （将项目生成的包放到外部服务器中—私服仓库）</li>
</ul>
</blockquote>
<h4 id="5-2-生命周期管理指令"><a href="#5-2-生命周期管理指令" class="headerlink" title="5.2 生命周期管理指令"></a>5.2 生命周期管理指令</h4><blockquote>
<p>在项目的根目录下执行mvn指令（此目录下必须包含pom.xml）</p>
</blockquote>
<ul>
<li>清除缓存</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn clean</span><br></pre></td></tr></table></figure>

<ul>
<li>检查</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn check</span><br></pre></td></tr></table></figure>

<ul>
<li>编译</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn compile</span><br></pre></td></tr></table></figure>

<ul>
<li>测试</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn test</span><br></pre></td></tr></table></figure>

<ul>
<li>打包</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn package</span><br></pre></td></tr></table></figure>

<ul>
<li>安装 </li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn install</span><br></pre></td></tr></table></figure>

<ul>
<li>部署 </li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn deploye</span><br></pre></td></tr></table></figure>

<h2 id="六、基于IDEA的Maven使用"><a href="#六、基于IDEA的Maven使用" class="headerlink" title="六、基于IDEA的Maven使用"></a>六、基于IDEA的Maven使用</h2><h4 id="6-1-在IDEA中关联Maven"><a href="#6-1-在IDEA中关联Maven" class="headerlink" title="6.1 在IDEA中关联Maven"></a>6.1 在IDEA中关联Maven</h4><table>
<thead>
<tr>
<th>maven配置</th>
</tr>
</thead>
<tbody><tr>
<td><img src="/images/Mavenimgs/1615963348490.png" alt="1615963348490"></td>
</tr>
<tr>
<td><img src="/images/Mavenimgs/1615963666386.png" alt="1615963666386"></td>
</tr>
</tbody></table>
<p><code>说明：</code> IDEA本身集成了Maven，考虑到IDEA和Maven版本的兼容性，Idea不建议配置比默认版本更新的版本，建议使用idea自带的maven。</p>
<h4 id="6-2-使用IDEA创建Maven项目"><a href="#6-2-使用IDEA创建Maven项目" class="headerlink" title="6.2 使用IDEA创建Maven项目"></a>6.2 使用IDEA创建Maven项目</h4><h6 id="6-2-1-Java项目"><a href="#6-2-1-Java项目" class="headerlink" title="6.2.1 Java项目"></a>6.2.1 Java项目</h6><table>
<thead>
<tr>
<th>创建Java项目</th>
</tr>
</thead>
<tbody><tr>
<td><img src="/images/Mavenimgs/1615964274767.png" alt="1615964274767"></td>
</tr>
<tr>
<td><img src="/images/Mavenimgs/1615964923674.png" alt="1615964923674"></td>
</tr>
<tr>
<td><img src="/images/Mavenimgs/1615965081111.png" alt="1615965081111"></td>
</tr>
</tbody></table>
<h6 id="6-2-2-web项目"><a href="#6-2-2-web项目" class="headerlink" title="6.2.2 web项目"></a>6.2.2 web项目</h6><ul>
<li><p><strong>创建maven项目</strong>：maven-demo2</p>
</li>
<li><p><strong>在pom.xml文件设置打包方式为war</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.qfedu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-demo2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--设置项目打包方式为war--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>完成web项目结构</strong></p>
<p><img src="/images/Mavenimgs/1615966156430.png" alt="1615966156430"></p>
</li>
<li><p><strong>配置web组件—Tomcat</strong></p>
<p><img src="/images/Mavenimgs/1615966233010.png" alt="1615966233010"></p>
<p><img src="/images/Mavenimgs/1615966284891.png" alt="1615966284891"></p>
<p><img src="/images/Mavenimgs/1615966379430.png" alt="1615966379430"></p>
</li>
<li><p><strong>部署web项目</strong></p>
<p><img src="/images/Mavenimgs/1615966537967.png" alt="1615966537967"></p>
<p><img src="/images/Mavenimgs/1615966622390.png" alt="1615966622390"></p>
</li>
</ul>
<h4 id="6-3-在IDEA中使用Maven进行依赖管理"><a href="#6-3-在IDEA中使用Maven进行依赖管理" class="headerlink" title="6.3 在IDEA中使用Maven进行依赖管理"></a>6.3 在IDEA中使用Maven进行依赖管理</h4><h6 id="6-3-1-查找依赖坐标"><a href="#6-3-1-查找依赖坐标" class="headerlink" title="6.3.1 查找依赖坐标"></a>6.3.1 查找依赖坐标</h6><ul>
<li><a href="https://mvnrepository.com/">https://mvnrepository.com/</a></li>
</ul>
<h6 id="6-3-2-添加依赖"><a href="#6-3-2-添加依赖" class="headerlink" title="6.3.2 添加依赖"></a>6.3.2 添加依赖</h6><ul>
<li>将依赖的坐标配置到项目的pom.xml文件dependencies标签中</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.qfedu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-demo2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--设置项目打包方式为war--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--在此位置配置项目中所需依赖的坐标 GAV--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="6-3-3-依赖范围"><a href="#6-3-3-依赖范围" class="headerlink" title="6.3.3 依赖范围"></a>6.3.3 依赖范围</h6><blockquote>
<p>在通过dependency添加依赖时，可以通过<code>scope</code>标签配置当前依赖的适用范围</p>
</blockquote>
<ul>
<li><p>test  只在项目测试阶段引入当前依赖(编译、测试)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>runtime 只在运行时使用（运行、测试运行）</p>
</li>
<li><p>provided 在（编译、测试、运行）</p>
</li>
<li><p>compile 在（编译、测试、运行、打包）都引入</p>
</li>
</ul>
<h4 id="6-4-在IDEA中使用Maven进行项目构建"><a href="#6-4-在IDEA中使用Maven进行项目构建" class="headerlink" title="6.4 在IDEA中使用Maven进行项目构建"></a>6.4 在IDEA中使用Maven进行项目构建</h4><h6 id="6-4-1-Maven项目构建生命周期说明"><a href="#6-4-1-Maven项目构建生命周期说明" class="headerlink" title="6.4.1 Maven项目构建生命周期说明"></a>6.4.1 Maven项目构建生命周期说明</h6><ul>
<li>clean 清理缓存  清理项目生成的缓存</li>
<li>validate 校验  验证项目需要是正确的（项目信息、依赖）</li>
<li>compile 编译  编译项目专供的源代码</li>
<li>test 测试  运行项目中的单元测试</li>
<li>package 打包  将项目编译后的代码打包成发布格式</li>
<li>verify 检查  对集成测试的结果进行检查、确保项目的质量是达标的</li>
<li>install 安装 将包安装到maven的本地仓库，以便在本地的其他项目中可以引用此项目（聚合工程）</li>
<li>deploy  部署  将包安装到私服的仓库，以供其他开发人员共享</li>
</ul>
<h6 id="6-4-2-IDEA进行生命周期管理"><a href="#6-4-2-IDEA进行生命周期管理" class="headerlink" title="6.4.2 IDEA进行生命周期管理"></a>6.4.2 IDEA进行生命周期管理</h6><ul>
<li><p>可视化</p>
<p><img src="/images/Mavenimgs/1615970887716.png" alt="1615970887716"></p>
</li>
<li><p>终端指令</p>
<p>选择项目名称—右键—Open in Terminal</p>
<p>mvn clean</p>
</li>
</ul>
<h2 id="七、私服"><a href="#七、私服" class="headerlink" title="七、私服"></a>七、私服</h2><blockquote>
<p>企业搭建供内部使用的一个Maven仓库</p>
<ul>
<li>开发者需要依赖直接从私服下载</li>
<li>私服可以实现企业内部依赖的共享：当企业开发了一个通用插件（jar），可以发布到私服，可以连接到当前私服的其他开发者就可以共享这个插件了</li>
</ul>
</blockquote>
<h4 id="7-1-私服搭建"><a href="#7-1-私服搭建" class="headerlink" title="7.1 私服搭建"></a>7.1 私服搭建</h4><p>我们可以通过专门的Maven仓库管理软件来搭建私服。例如：Apache Archiva、Nexus</p>
<h6 id="7-1-1-下载Nexus"><a href="#7-1-1-下载Nexus" class="headerlink" title="7.1.1 下载Nexus"></a>7.1.1 下载Nexus</h6><ul>
<li>官网 <a href="https://www.sonatype.com/">https://www.sonatype.com/</a></li>
<li>下载 <a href="https://help.sonatype.com/repomanager2/download">https://help.sonatype.com/repomanager2/download</a></li>
</ul>
<h6 id="7-1-2-解压nexus"><a href="#7-1-2-解压nexus" class="headerlink" title="7.1.2 解压nexus"></a>7.1.2 解压nexus</h6><p><img src="/images/Mavenimgs/1615972207503.png" alt="1615972207503"></p>
<h6 id="7-1-3-安装并运行nexus"><a href="#7-1-3-安装并运行nexus" class="headerlink" title="7.1.3 安装并运行nexus"></a>7.1.3 安装并运行nexus</h6><ul>
<li><p>进入到<code>nexus-2.14.11-01/bin</code>目录</p>
</li>
<li><p>管理员身份打开cmd命令行，执行指令</p>
<p><img src="/images/Mavenimgs/1615972590023.png" alt="1615972590023"></p>
</li>
</ul>
<h6 id="7-1-4-登录Nexus"><a href="#7-1-4-登录Nexus" class="headerlink" title="7.1.4 登录Nexus"></a>7.1.4 登录Nexus</h6><blockquote>
<p>私服管理器登录地址： <a href="http://localhost:8081/nexus">http://localhost:8081/nexus</a></p>
</blockquote>
<p><img src="/images/Mavenimgs/1615972765110.png" alt="1615972765110"></p>
<ul>
<li>私服中仓库类型</li>
</ul>
<p><img src="/images/Mavenimgs/1615972987904.png" alt="1615972987904"></p>
<ul>
<li>私服仓库组的配置</li>
</ul>
<p><img src="/images/Mavenimgs/1615973337723.png" alt="1615973337723"></p>
<h4 id="7-2-配置私服"><a href="#7-2-配置私服" class="headerlink" title="7.2 配置私服"></a>7.2 配置私服</h4><h6 id="7-2-1-在maven的settings-xml文件的servers标签中"><a href="#7-2-1-在maven的settings-xml文件的servers标签中" class="headerlink" title="7.2.1 在maven的settings.xml文件的servers标签中"></a>7.2.1 在maven的settings.xml文件的<code>servers</code>标签中</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置连接私服所需的帐号和密码--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-public<span class="tag">&lt;/<span class="name">id</span>&gt;</span> <span class="comment">&lt;!-- nexus的认证id --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span> <span class="comment">&lt;!--nexus中的用户名密码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="7-2-2-在maven的settings-xml文件的profiles标签中"><a href="#7-2-2-在maven的settings-xml文件的profiles标签中" class="headerlink" title="7.2.2 在maven的settings.xml文件的profiles标签中"></a>7.2.2 在maven的settings.xml文件的<code>profiles</code>标签中</h6><blockquote>
<p>repository 和 pluginRepository的  id子标签的值，要和上面配置的server 的id子标签的值一致</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-public<span class="tag">&lt;/<span class="name">id</span>&gt;</span>      </span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Release Snapshot Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span>   </span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;/<span class="name">releases</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-public<span class="tag">&lt;/<span class="name">id</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;/<span class="name">releases</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="7-2-3-在maven的settings-xml文件的activeProfiles配置激活profile"><a href="#7-2-3-在maven的settings-xml文件的activeProfiles配置激活profile" class="headerlink" title="7.2.3  在maven的settings.xml文件的activeProfiles配置激活profile"></a>7.2.3  在maven的settings.xml文件的<code>activeProfiles</code>配置激活profile</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>关联教学地址：<a href="https://space.bilibili.com/416186032">千锋教学</a></p>
<p>*注意： 本笔记多数来自网络，如有侵权，请尽快联系删除！！</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
</search>
